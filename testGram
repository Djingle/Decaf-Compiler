// Commentaire en DECAF
class Program {}

class Program {
    //t_fielDecl
    int simpleInt ;
    boolean simple_bool ;
    int simplTab[2] ;
    int what_[0xaA] ;
    int plusieurs, variables ;
    int avec, tableau[5] ;
    
    //t_methoDecl
    void sansParam() {}
    void methode_simple(int param1, boolean param2) {}
    boolean sans_param()  {}
    int methode_simple(int param1) {}
    
    int varCheck(int param1) {
        //t_varDecl 
        int var1 ;
        int var2 , var3;
        int tab1[5]; 
        int what[0], var4; 
    }
    int oneStatementCheck(int param1) {
        {}
        continue; break;
        return ;
        return expr;
        return -(fct()%5);
    }
    int location_expr(int param1) {
        //statement : location EGAL|MEGAL|PEGAL expr SEMICOL
        id = id; id = id[5];
        id = fct(); id=fct( (-fct(id)) || (!fct(5)) &&  0xaA != id[5] ); 
        id = 5; id = 0xaA; id = true;
        id = -(fct()%5);
        id[5] = 5;
        id += fct();
        id -= fct();
        id[5] += fct();
        id[5] -= -(fct()%5);
    }
    int methodCall_expr(int param1) {
        //statment : method_call SEMICOL
        fct();
        fct(id);
        fct(id[5]);
        fct(fct(5));
        fct(true);
        fct(5);
        fct(0xaA);
        fct(fct(5)==true);
        fct( (-fct(id)) || (!fct(5)) &&  0xaA != id[5] ); 
        // conflit : a||(b&&c) ou (a||b)&&c ; abc=TTF
        fct(plusieurs, params[5], 5);
    }
    int IF_expr(int param1) {
        // statement : IF OPAR expr CPAR block
        if (id) {}
        if (-(fct()%5)) {}
        if (((id))) {}
        if (id[5]>5) {}
        if (id) {fct()}
        if (id) {
            int var;
            var=5
            fct()
        }
    }
    int IfElse_expr(int param1) {
        // statement : IF OPAR expr CPAR block
        if (id) {} else {}
        if (-(fct()%5)) {} else {}
        if (((id))) {} else {}
        if (id[5]>5) {} else {}
        if (id) {fct()} else {fct()}
        if (id>5) {
            int var;
            var=5
            fct()
        } 
        else {
            int var;
            var=5
            fct()
        }
    }
    int forBlock(int param1) {
        // statement : FOR ID EGAL expr COMMA expr block
        for id= expr, expr {}
        for id= expr, expr {fct()}
        for id= 0, 10 {fct()}
        for id= 0, 10 {
            int var;
            var=5;
            fct(var);
        }
    }
}

class Program {
    int var1, var2, tab1[0], tab2[5];
    boolean boo1, boo2, tboo1[0], tboo2[5];

    int cas_simple(){ //commentaire
        int var1, var2;
        var2=0;
        boolean b[fct(0)];
        var1=fct(var);
        if(b[0]) {return var1/var2;}
        return 0;
    }
    void rien()  {}
    void sansParam() {return 5;} //Ã§a doit marcher aussi
    void plusieurs_params(int param1, boolean param2, int tab[5]) {}
    int methode_simple(int param1) {}

    int main(int a[10], boolean b[10]) {
        int i,j,k;
        int select[10];

        for i =0, 9 {
            select[i]=-1
            if (b[i]) {
                select[j]=a[i];
                j += 1;
            }
            else {
                for k=i+1, 9 {
                    select[k]-=1;
                }
            }
            
        }
    }

}

// declarer des variables au milieu de class et/ou au milieu des methodes
// try void method and return something
// check the return type before return
// t_fielDecl : var[fonction(5)] ??
// COMMENTS EVERYWHERE
// ajouter des tests pour WriteInt et WriteString
// voir si methode = main